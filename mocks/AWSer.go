// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AWSer is an autogenerated mock type for the AWSer type
type AWSer struct {
	mock.Mock
}

// ConfigureAWSCLICredentials provides a mock function with given fields: accessKeyID, secretAccessKey, sessionToken, profile
func (_m *AWSer) ConfigureAWSCLICredentials(accessKeyID string, secretAccessKey string, sessionToken string, profile string) {
	_m.Called(accessKeyID, secretAccessKey, sessionToken, profile)
}

// UpdateLambdasFromS3Assets provides a mock function with given fields: lambdaNames, bucket, namespace
func (_m *AWSer) UpdateLambdasFromS3Assets(lambdaNames []string, bucket string, namespace string) {
	_m.Called(lambdaNames, bucket, namespace)
}

// UploadDirectoryToS3 provides a mock function with given fields: localPath, bucket, prefix
func (_m *AWSer) UploadDirectoryToS3(localPath string, bucket string, prefix string) ([]string, []string) {
	ret := _m.Called(localPath, bucket, prefix)

	if len(ret) == 0 {
		panic("no return value specified for UploadDirectoryToS3")
	}

	var r0 []string
	var r1 []string
	if rf, ok := ret.Get(0).(func(string, string, string) ([]string, []string)); ok {
		return rf(localPath, bucket, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(localPath, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) []string); ok {
		r1 = rf(localPath, bucket, prefix)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// NewAWSer creates a new instance of AWSer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAWSer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AWSer {
	mock := &AWSer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
