// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	service "github.com/Optum/dce-cli/pkg/service"
	mock "github.com/stretchr/testify/mock"
)

// Deployer is an autogenerated mock type for the Deployer type
type Deployer struct {
	mock.Mock
}

// Deploy provides a mock function with given fields: input
func (_m *Deployer) Deploy(input *service.DeployConfig) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*service.DeployConfig) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostDeploy provides a mock function with given fields: input
func (_m *Deployer) PostDeploy(input *service.DeployConfig) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for PostDeploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*service.DeployConfig) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeployer creates a new instance of Deployer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeployer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Deployer {
	mock := &Deployer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
