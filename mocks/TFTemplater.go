// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// TFTemplater is an autogenerated mock type for the TFTemplater type
type TFTemplater struct {
	mock.Mock
}

// AddVariable provides a mock function with given fields: name, vartype, vardefault
func (_m *TFTemplater) AddVariable(name string, vartype string, vardefault string) error {
	ret := _m.Called(name, vartype, vardefault)

	if len(ret) == 0 {
		panic("no return value specified for AddVariable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(name, vartype, vardefault)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetModuleSource provides a mock function with given fields: source
func (_m *TFTemplater) SetModuleSource(source string) {
	_m.Called(source)
}

// Write provides a mock function with given fields: w
func (_m *TFTemplater) Write(w io.Writer) error {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTFTemplater creates a new instance of TFTemplater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTFTemplater(t interface {
	mock.TestingT
	Cleanup(func())
}) *TFTemplater {
	mock := &TFTemplater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
