// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetLeasesReader is a Reader for the GetLeases structure.
type GetLeasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLeasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLeasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLeasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLeasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /leases] GetLeases", response, response.Code())
	}
}

// NewGetLeasesOK creates a GetLeasesOK with default headers values
func NewGetLeasesOK() *GetLeasesOK {
	return &GetLeasesOK{}
}

/*
GetLeasesOK describes a response with status code 200, with default header values.

OK
*/
type GetLeasesOK struct {
	AccessControlAllowHeaders string
	AccessControlAllowMethods string
	AccessControlAllowOrigin  string

	/* Appears only when there is another page of results in the query. The value contains the URL for the next page of the results and follows the `<url>; rel="next"` convention.
	 */
	Link string

	Payload []*GetLeasesOKBodyItems0
}

// IsSuccess returns true when this get leases o k response has a 2xx status code
func (o *GetLeasesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get leases o k response has a 3xx status code
func (o *GetLeasesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get leases o k response has a 4xx status code
func (o *GetLeasesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get leases o k response has a 5xx status code
func (o *GetLeasesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get leases o k response a status code equal to that given
func (o *GetLeasesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get leases o k response
func (o *GetLeasesOK) Code() int {
	return 200
}

func (o *GetLeasesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /leases][%d] getLeasesOK %s", 200, payload)
}

func (o *GetLeasesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /leases][%d] getLeasesOK %s", 200, payload)
}

func (o *GetLeasesOK) GetPayload() []*GetLeasesOKBodyItems0 {
	return o.Payload
}

func (o *GetLeasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Access-Control-Allow-Headers
	hdrAccessControlAllowHeaders := response.GetHeader("Access-Control-Allow-Headers")

	if hdrAccessControlAllowHeaders != "" {
		o.AccessControlAllowHeaders = hdrAccessControlAllowHeaders
	}

	// hydrates response header Access-Control-Allow-Methods
	hdrAccessControlAllowMethods := response.GetHeader("Access-Control-Allow-Methods")

	if hdrAccessControlAllowMethods != "" {
		o.AccessControlAllowMethods = hdrAccessControlAllowMethods
	}

	// hydrates response header Access-Control-Allow-Origin
	hdrAccessControlAllowOrigin := response.GetHeader("Access-Control-Allow-Origin")

	if hdrAccessControlAllowOrigin != "" {
		o.AccessControlAllowOrigin = hdrAccessControlAllowOrigin
	}

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeasesBadRequest creates a GetLeasesBadRequest with default headers values
func NewGetLeasesBadRequest() *GetLeasesBadRequest {
	return &GetLeasesBadRequest{}
}

/*
GetLeasesBadRequest describes a response with status code 400, with default header values.

"Failed to Parse Request Body" if the request body is blank or incorrectly formatted.
*/
type GetLeasesBadRequest struct {
}

// IsSuccess returns true when this get leases bad request response has a 2xx status code
func (o *GetLeasesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get leases bad request response has a 3xx status code
func (o *GetLeasesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get leases bad request response has a 4xx status code
func (o *GetLeasesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get leases bad request response has a 5xx status code
func (o *GetLeasesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get leases bad request response a status code equal to that given
func (o *GetLeasesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get leases bad request response
func (o *GetLeasesBadRequest) Code() int {
	return 400
}

func (o *GetLeasesBadRequest) Error() string {
	return fmt.Sprintf("[GET /leases][%d] getLeasesBadRequest", 400)
}

func (o *GetLeasesBadRequest) String() string {
	return fmt.Sprintf("[GET /leases][%d] getLeasesBadRequest", 400)
}

func (o *GetLeasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLeasesForbidden creates a GetLeasesForbidden with default headers values
func NewGetLeasesForbidden() *GetLeasesForbidden {
	return &GetLeasesForbidden{}
}

/*
GetLeasesForbidden describes a response with status code 403, with default header values.

Failed to authenticate request
*/
type GetLeasesForbidden struct {
}

// IsSuccess returns true when this get leases forbidden response has a 2xx status code
func (o *GetLeasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get leases forbidden response has a 3xx status code
func (o *GetLeasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get leases forbidden response has a 4xx status code
func (o *GetLeasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get leases forbidden response has a 5xx status code
func (o *GetLeasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get leases forbidden response a status code equal to that given
func (o *GetLeasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get leases forbidden response
func (o *GetLeasesForbidden) Code() int {
	return 403
}

func (o *GetLeasesForbidden) Error() string {
	return fmt.Sprintf("[GET /leases][%d] getLeasesForbidden", 403)
}

func (o *GetLeasesForbidden) String() string {
	return fmt.Sprintf("[GET /leases][%d] getLeasesForbidden", 403)
}

func (o *GetLeasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetLeasesOKBodyItems0 Lease Details
swagger:model GetLeasesOKBodyItems0
*/
type GetLeasesOKBodyItems0 struct {

	// accountId of the AWS account
	AccountID string `json:"accountId,omitempty"`

	// budget amount
	BudgetAmount float64 `json:"budgetAmount,omitempty"`

	// budget currency
	BudgetCurrency string `json:"budgetCurrency,omitempty"`

	// budget notification emails
	BudgetNotificationEmails []string `json:"budgetNotificationEmails"`

	// creation date in epoch seconds
	CreatedOn float64 `json:"createdOn,omitempty"`

	// date lease should expire in epoch seconds
	ExpiresOn float64 `json:"expiresOn,omitempty"`

	// Lease ID
	ID string `json:"id,omitempty"`

	// date last modified in epoch seconds
	LastModifiedOn float64 `json:"lastModifiedOn,omitempty"`

	// Status of the Lease.
	// "Active": The principal is leased and has access to the account
	// "Inactive": The lease has become inactive, either through expiring, exceeding budget, or by request.
	//
	// Enum: ["Active","Inactive"]
	LeaseStatus string `json:"leaseStatus,omitempty"`

	// date lease status was last modified in epoch seconds
	LeaseStatusModifiedOn float64 `json:"leaseStatusModifiedOn,omitempty"`

	// A reason behind the lease status.
	// "LeaseExpired": The lease exceeded its expiration time ("expiresOn") and
	// the associated account was reset and returned to the account pool.
	// "LeaseOverBudget": The lease exceeded its budgeted amount and the
	// associated account was reset and returned to the account pool.
	// "LeaseDestroyed": The lease was adminstratively ended, which can be done
	// via the leases API.
	// "LeaseActive": The lease is active.
	// "LeaseRolledBack": A system error occurred while provisioning the lease.
	// and it was rolled back.
	//
	// Enum: ["LeaseExpired","LeaseOverBudget","LeaseDestroyed","LeaseActive","LeaseRolledBack"]
	LeaseStatusReason string `json:"leaseStatusReason,omitempty"`

	// principalId of the lease to get
	PrincipalID string `json:"principalId,omitempty"`
}

// Validate validates this get leases o k body items0
func (o *GetLeasesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLeaseStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLeaseStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getLeasesOKBodyItems0TypeLeaseStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getLeasesOKBodyItems0TypeLeaseStatusPropEnum = append(getLeasesOKBodyItems0TypeLeaseStatusPropEnum, v)
	}
}

const (

	// GetLeasesOKBodyItems0LeaseStatusActive captures enum value "Active"
	GetLeasesOKBodyItems0LeaseStatusActive string = "Active"

	// GetLeasesOKBodyItems0LeaseStatusInactive captures enum value "Inactive"
	GetLeasesOKBodyItems0LeaseStatusInactive string = "Inactive"
)

// prop value enum
func (o *GetLeasesOKBodyItems0) validateLeaseStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getLeasesOKBodyItems0TypeLeaseStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetLeasesOKBodyItems0) validateLeaseStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.LeaseStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateLeaseStatusEnum("leaseStatus", "body", o.LeaseStatus); err != nil {
		return err
	}

	return nil
}

var getLeasesOKBodyItems0TypeLeaseStatusReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LeaseExpired","LeaseOverBudget","LeaseDestroyed","LeaseActive","LeaseRolledBack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getLeasesOKBodyItems0TypeLeaseStatusReasonPropEnum = append(getLeasesOKBodyItems0TypeLeaseStatusReasonPropEnum, v)
	}
}

const (

	// GetLeasesOKBodyItems0LeaseStatusReasonLeaseExpired captures enum value "LeaseExpired"
	GetLeasesOKBodyItems0LeaseStatusReasonLeaseExpired string = "LeaseExpired"

	// GetLeasesOKBodyItems0LeaseStatusReasonLeaseOverBudget captures enum value "LeaseOverBudget"
	GetLeasesOKBodyItems0LeaseStatusReasonLeaseOverBudget string = "LeaseOverBudget"

	// GetLeasesOKBodyItems0LeaseStatusReasonLeaseDestroyed captures enum value "LeaseDestroyed"
	GetLeasesOKBodyItems0LeaseStatusReasonLeaseDestroyed string = "LeaseDestroyed"

	// GetLeasesOKBodyItems0LeaseStatusReasonLeaseActive captures enum value "LeaseActive"
	GetLeasesOKBodyItems0LeaseStatusReasonLeaseActive string = "LeaseActive"

	// GetLeasesOKBodyItems0LeaseStatusReasonLeaseRolledBack captures enum value "LeaseRolledBack"
	GetLeasesOKBodyItems0LeaseStatusReasonLeaseRolledBack string = "LeaseRolledBack"
)

// prop value enum
func (o *GetLeasesOKBodyItems0) validateLeaseStatusReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getLeasesOKBodyItems0TypeLeaseStatusReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetLeasesOKBodyItems0) validateLeaseStatusReason(formats strfmt.Registry) error {
	if swag.IsZero(o.LeaseStatusReason) { // not required
		return nil
	}

	// value enum
	if err := o.validateLeaseStatusReasonEnum("leaseStatusReason", "body", o.LeaseStatusReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get leases o k body items0 based on context it is used
func (o *GetLeasesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLeasesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLeasesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetLeasesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
