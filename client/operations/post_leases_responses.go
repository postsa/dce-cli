// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostLeasesReader is a Reader for the PostLeases structure.
type PostLeasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLeasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostLeasesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostLeasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostLeasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostLeasesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostLeasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /leases] PostLeases", response, response.Code())
	}
}

// NewPostLeasesCreated creates a PostLeasesCreated with default headers values
func NewPostLeasesCreated() *PostLeasesCreated {
	return &PostLeasesCreated{}
}

/*
PostLeasesCreated describes a response with status code 201, with default header values.

PostLeasesCreated post leases created
*/
type PostLeasesCreated struct {
	AccessControlAllowHeaders string
	AccessControlAllowMethods string
	AccessControlAllowOrigin  string

	Payload *PostLeasesCreatedBody
}

// IsSuccess returns true when this post leases created response has a 2xx status code
func (o *PostLeasesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post leases created response has a 3xx status code
func (o *PostLeasesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post leases created response has a 4xx status code
func (o *PostLeasesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post leases created response has a 5xx status code
func (o *PostLeasesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post leases created response a status code equal to that given
func (o *PostLeasesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post leases created response
func (o *PostLeasesCreated) Code() int {
	return 201
}

func (o *PostLeasesCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /leases][%d] postLeasesCreated %s", 201, payload)
}

func (o *PostLeasesCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /leases][%d] postLeasesCreated %s", 201, payload)
}

func (o *PostLeasesCreated) GetPayload() *PostLeasesCreatedBody {
	return o.Payload
}

func (o *PostLeasesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Access-Control-Allow-Headers
	hdrAccessControlAllowHeaders := response.GetHeader("Access-Control-Allow-Headers")

	if hdrAccessControlAllowHeaders != "" {
		o.AccessControlAllowHeaders = hdrAccessControlAllowHeaders
	}

	// hydrates response header Access-Control-Allow-Methods
	hdrAccessControlAllowMethods := response.GetHeader("Access-Control-Allow-Methods")

	if hdrAccessControlAllowMethods != "" {
		o.AccessControlAllowMethods = hdrAccessControlAllowMethods
	}

	// hydrates response header Access-Control-Allow-Origin
	hdrAccessControlAllowOrigin := response.GetHeader("Access-Control-Allow-Origin")

	if hdrAccessControlAllowOrigin != "" {
		o.AccessControlAllowOrigin = hdrAccessControlAllowOrigin
	}

	o.Payload = new(PostLeasesCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLeasesBadRequest creates a PostLeasesBadRequest with default headers values
func NewPostLeasesBadRequest() *PostLeasesBadRequest {
	return &PostLeasesBadRequest{}
}

/*
PostLeasesBadRequest describes a response with status code 400, with default header values.

If the "expiresOn" date specified is non-zero but less than the current epoch date,  "Requested lease has a desired expiry date less than today: <date>" or "Failed to Parse Request Body" if the request body is blank or incorrectly formatted.
*/
type PostLeasesBadRequest struct {
}

// IsSuccess returns true when this post leases bad request response has a 2xx status code
func (o *PostLeasesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post leases bad request response has a 3xx status code
func (o *PostLeasesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post leases bad request response has a 4xx status code
func (o *PostLeasesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post leases bad request response has a 5xx status code
func (o *PostLeasesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post leases bad request response a status code equal to that given
func (o *PostLeasesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post leases bad request response
func (o *PostLeasesBadRequest) Code() int {
	return 400
}

func (o *PostLeasesBadRequest) Error() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesBadRequest", 400)
}

func (o *PostLeasesBadRequest) String() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesBadRequest", 400)
}

func (o *PostLeasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostLeasesForbidden creates a PostLeasesForbidden with default headers values
func NewPostLeasesForbidden() *PostLeasesForbidden {
	return &PostLeasesForbidden{}
}

/*
PostLeasesForbidden describes a response with status code 403, with default header values.

Failed to authenticate request
*/
type PostLeasesForbidden struct {
}

// IsSuccess returns true when this post leases forbidden response has a 2xx status code
func (o *PostLeasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post leases forbidden response has a 3xx status code
func (o *PostLeasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post leases forbidden response has a 4xx status code
func (o *PostLeasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post leases forbidden response has a 5xx status code
func (o *PostLeasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post leases forbidden response a status code equal to that given
func (o *PostLeasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post leases forbidden response
func (o *PostLeasesForbidden) Code() int {
	return 403
}

func (o *PostLeasesForbidden) Error() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesForbidden", 403)
}

func (o *PostLeasesForbidden) String() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesForbidden", 403)
}

func (o *PostLeasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostLeasesConflict creates a PostLeasesConflict with default headers values
func NewPostLeasesConflict() *PostLeasesConflict {
	return &PostLeasesConflict{}
}

/*
PostLeasesConflict describes a response with status code 409, with default header values.

Conflict if there is an existing lease already active with the provided principal and account.
*/
type PostLeasesConflict struct {
}

// IsSuccess returns true when this post leases conflict response has a 2xx status code
func (o *PostLeasesConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post leases conflict response has a 3xx status code
func (o *PostLeasesConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post leases conflict response has a 4xx status code
func (o *PostLeasesConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post leases conflict response has a 5xx status code
func (o *PostLeasesConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post leases conflict response a status code equal to that given
func (o *PostLeasesConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post leases conflict response
func (o *PostLeasesConflict) Code() int {
	return 409
}

func (o *PostLeasesConflict) Error() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesConflict", 409)
}

func (o *PostLeasesConflict) String() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesConflict", 409)
}

func (o *PostLeasesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostLeasesInternalServerError creates a PostLeasesInternalServerError with default headers values
func NewPostLeasesInternalServerError() *PostLeasesInternalServerError {
	return &PostLeasesInternalServerError{}
}

/*
PostLeasesInternalServerError describes a response with status code 500, with default header values.

Server errors if the database cannot be reached.
*/
type PostLeasesInternalServerError struct {
}

// IsSuccess returns true when this post leases internal server error response has a 2xx status code
func (o *PostLeasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post leases internal server error response has a 3xx status code
func (o *PostLeasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post leases internal server error response has a 4xx status code
func (o *PostLeasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post leases internal server error response has a 5xx status code
func (o *PostLeasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post leases internal server error response a status code equal to that given
func (o *PostLeasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post leases internal server error response
func (o *PostLeasesInternalServerError) Code() int {
	return 500
}

func (o *PostLeasesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesInternalServerError", 500)
}

func (o *PostLeasesInternalServerError) String() string {
	return fmt.Sprintf("[POST /leases][%d] postLeasesInternalServerError", 500)
}

func (o *PostLeasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostLeasesBody post leases body
swagger:model PostLeasesBody
*/
type PostLeasesBody struct {

	// budget amount
	// Required: true
	BudgetAmount *float64 `json:"budgetAmount"`

	// budget currency
	// Required: true
	BudgetCurrency *string `json:"budgetCurrency"`

	// budget notification emails
	// Required: true
	BudgetNotificationEmails []string `json:"budgetNotificationEmails"`

	// expires on
	ExpiresOn float64 `json:"expiresOn,omitempty"`

	// principal Id
	// Required: true
	PrincipalID *string `json:"principalId"`
}

// Validate validates this post leases body
func (o *PostLeasesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBudgetAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBudgetCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBudgetNotificationEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrincipalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLeasesBody) validateBudgetAmount(formats strfmt.Registry) error {

	if err := validate.Required("lease"+"."+"budgetAmount", "body", o.BudgetAmount); err != nil {
		return err
	}

	return nil
}

func (o *PostLeasesBody) validateBudgetCurrency(formats strfmt.Registry) error {

	if err := validate.Required("lease"+"."+"budgetCurrency", "body", o.BudgetCurrency); err != nil {
		return err
	}

	return nil
}

func (o *PostLeasesBody) validateBudgetNotificationEmails(formats strfmt.Registry) error {

	if err := validate.Required("lease"+"."+"budgetNotificationEmails", "body", o.BudgetNotificationEmails); err != nil {
		return err
	}

	return nil
}

func (o *PostLeasesBody) validatePrincipalID(formats strfmt.Registry) error {

	if err := validate.Required("lease"+"."+"principalId", "body", o.PrincipalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post leases body based on context it is used
func (o *PostLeasesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostLeasesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLeasesBody) UnmarshalBinary(b []byte) error {
	var res PostLeasesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostLeasesCreatedBody Lease Details
swagger:model PostLeasesCreatedBody
*/
type PostLeasesCreatedBody struct {

	// accountId of the AWS account
	AccountID string `json:"accountId,omitempty"`

	// budget amount
	BudgetAmount float64 `json:"budgetAmount,omitempty"`

	// budget currency
	BudgetCurrency string `json:"budgetCurrency,omitempty"`

	// budget notification emails
	BudgetNotificationEmails []string `json:"budgetNotificationEmails"`

	// creation date in epoch seconds
	CreatedOn float64 `json:"createdOn,omitempty"`

	// date lease should expire in epoch seconds
	ExpiresOn float64 `json:"expiresOn,omitempty"`

	// Lease ID
	ID string `json:"id,omitempty"`

	// date last modified in epoch seconds
	LastModifiedOn float64 `json:"lastModifiedOn,omitempty"`

	// Status of the Lease.
	// "Active": The principal is leased and has access to the account
	// "Inactive": The lease has become inactive, either through expiring, exceeding budget, or by request.
	//
	// Enum: ["Active","Inactive"]
	LeaseStatus string `json:"leaseStatus,omitempty"`

	// date lease status was last modified in epoch seconds
	LeaseStatusModifiedOn float64 `json:"leaseStatusModifiedOn,omitempty"`

	// A reason behind the lease status.
	// "LeaseExpired": The lease exceeded its expiration time ("expiresOn") and
	// the associated account was reset and returned to the account pool.
	// "LeaseOverBudget": The lease exceeded its budgeted amount and the
	// associated account was reset and returned to the account pool.
	// "LeaseDestroyed": The lease was adminstratively ended, which can be done
	// via the leases API.
	// "LeaseActive": The lease is active.
	// "LeaseRolledBack": A system error occurred while provisioning the lease.
	// and it was rolled back.
	//
	// Enum: ["LeaseExpired","LeaseOverBudget","LeaseDestroyed","LeaseActive","LeaseRolledBack"]
	LeaseStatusReason string `json:"leaseStatusReason,omitempty"`

	// principalId of the lease to get
	PrincipalID string `json:"principalId,omitempty"`
}

// Validate validates this post leases created body
func (o *PostLeasesCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLeaseStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLeaseStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postLeasesCreatedBodyTypeLeaseStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLeasesCreatedBodyTypeLeaseStatusPropEnum = append(postLeasesCreatedBodyTypeLeaseStatusPropEnum, v)
	}
}

const (

	// PostLeasesCreatedBodyLeaseStatusActive captures enum value "Active"
	PostLeasesCreatedBodyLeaseStatusActive string = "Active"

	// PostLeasesCreatedBodyLeaseStatusInactive captures enum value "Inactive"
	PostLeasesCreatedBodyLeaseStatusInactive string = "Inactive"
)

// prop value enum
func (o *PostLeasesCreatedBody) validateLeaseStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLeasesCreatedBodyTypeLeaseStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLeasesCreatedBody) validateLeaseStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.LeaseStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateLeaseStatusEnum("postLeasesCreated"+"."+"leaseStatus", "body", o.LeaseStatus); err != nil {
		return err
	}

	return nil
}

var postLeasesCreatedBodyTypeLeaseStatusReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LeaseExpired","LeaseOverBudget","LeaseDestroyed","LeaseActive","LeaseRolledBack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLeasesCreatedBodyTypeLeaseStatusReasonPropEnum = append(postLeasesCreatedBodyTypeLeaseStatusReasonPropEnum, v)
	}
}

const (

	// PostLeasesCreatedBodyLeaseStatusReasonLeaseExpired captures enum value "LeaseExpired"
	PostLeasesCreatedBodyLeaseStatusReasonLeaseExpired string = "LeaseExpired"

	// PostLeasesCreatedBodyLeaseStatusReasonLeaseOverBudget captures enum value "LeaseOverBudget"
	PostLeasesCreatedBodyLeaseStatusReasonLeaseOverBudget string = "LeaseOverBudget"

	// PostLeasesCreatedBodyLeaseStatusReasonLeaseDestroyed captures enum value "LeaseDestroyed"
	PostLeasesCreatedBodyLeaseStatusReasonLeaseDestroyed string = "LeaseDestroyed"

	// PostLeasesCreatedBodyLeaseStatusReasonLeaseActive captures enum value "LeaseActive"
	PostLeasesCreatedBodyLeaseStatusReasonLeaseActive string = "LeaseActive"

	// PostLeasesCreatedBodyLeaseStatusReasonLeaseRolledBack captures enum value "LeaseRolledBack"
	PostLeasesCreatedBodyLeaseStatusReasonLeaseRolledBack string = "LeaseRolledBack"
)

// prop value enum
func (o *PostLeasesCreatedBody) validateLeaseStatusReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLeasesCreatedBodyTypeLeaseStatusReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLeasesCreatedBody) validateLeaseStatusReason(formats strfmt.Registry) error {
	if swag.IsZero(o.LeaseStatusReason) { // not required
		return nil
	}

	// value enum
	if err := o.validateLeaseStatusReasonEnum("postLeasesCreated"+"."+"leaseStatusReason", "body", o.LeaseStatusReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post leases created body based on context it is used
func (o *PostLeasesCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostLeasesCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLeasesCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostLeasesCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
