// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetUsageReader is a Reader for the GetUsage structure.
type GetUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetUsageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /usage] GetUsage", response, response.Code())
	}
}

// NewGetUsageOK creates a GetUsageOK with default headers values
func NewGetUsageOK() *GetUsageOK {
	return &GetUsageOK{}
}

/*
GetUsageOK describes a response with status code 200, with default header values.

GetUsageOK get usage o k
*/
type GetUsageOK struct {
	AccessControlAllowHeaders string
	AccessControlAllowMethods string
	AccessControlAllowOrigin  string

	Payload []*GetUsageOKBodyItems0
}

// IsSuccess returns true when this get usage o k response has a 2xx status code
func (o *GetUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get usage o k response has a 3xx status code
func (o *GetUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage o k response has a 4xx status code
func (o *GetUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get usage o k response has a 5xx status code
func (o *GetUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage o k response a status code equal to that given
func (o *GetUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get usage o k response
func (o *GetUsageOK) Code() int {
	return 200
}

func (o *GetUsageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /usage][%d] getUsageOK %s", 200, payload)
}

func (o *GetUsageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /usage][%d] getUsageOK %s", 200, payload)
}

func (o *GetUsageOK) GetPayload() []*GetUsageOKBodyItems0 {
	return o.Payload
}

func (o *GetUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Access-Control-Allow-Headers
	hdrAccessControlAllowHeaders := response.GetHeader("Access-Control-Allow-Headers")

	if hdrAccessControlAllowHeaders != "" {
		o.AccessControlAllowHeaders = hdrAccessControlAllowHeaders
	}

	// hydrates response header Access-Control-Allow-Methods
	hdrAccessControlAllowMethods := response.GetHeader("Access-Control-Allow-Methods")

	if hdrAccessControlAllowMethods != "" {
		o.AccessControlAllowMethods = hdrAccessControlAllowMethods
	}

	// hydrates response header Access-Control-Allow-Origin
	hdrAccessControlAllowOrigin := response.GetHeader("Access-Control-Allow-Origin")

	if hdrAccessControlAllowOrigin != "" {
		o.AccessControlAllowOrigin = hdrAccessControlAllowOrigin
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsageForbidden creates a GetUsageForbidden with default headers values
func NewGetUsageForbidden() *GetUsageForbidden {
	return &GetUsageForbidden{}
}

/*
GetUsageForbidden describes a response with status code 403, with default header values.

Failed to authenticate request
*/
type GetUsageForbidden struct {
}

// IsSuccess returns true when this get usage forbidden response has a 2xx status code
func (o *GetUsageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get usage forbidden response has a 3xx status code
func (o *GetUsageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage forbidden response has a 4xx status code
func (o *GetUsageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get usage forbidden response has a 5xx status code
func (o *GetUsageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage forbidden response a status code equal to that given
func (o *GetUsageForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get usage forbidden response
func (o *GetUsageForbidden) Code() int {
	return 403
}

func (o *GetUsageForbidden) Error() string {
	return fmt.Sprintf("[GET /usage][%d] getUsageForbidden", 403)
}

func (o *GetUsageForbidden) String() string {
	return fmt.Sprintf("[GET /usage][%d] getUsageForbidden", 403)
}

func (o *GetUsageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetUsageOKBodyItems0 get usage o k body items0
swagger:model GetUsageOKBodyItems0
*/
type GetUsageOKBodyItems0 struct {

	// accountId of the AWS account
	AccountID string `json:"accountId,omitempty"`

	// usage cost Amount of AWS account for given period
	CostAmount float64 `json:"costAmount,omitempty"`

	// usage cost currency
	CostCurrency string `json:"costCurrency,omitempty"`

	// usage end date as Epoch Timestamp
	EndDate float64 `json:"endDate,omitempty"`

	// principalId of the user who owns the lease of the AWS account
	//
	PrincipalID string `json:"principalId,omitempty"`

	// usage start date as Epoch Timestamp
	StartDate float64 `json:"startDate,omitempty"`

	// ttl attribute as Epoch Timestamp
	TimeToLive float64 `json:"timeToLive,omitempty"`
}

// Validate validates this get usage o k body items0
func (o *GetUsageOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get usage o k body items0 based on context it is used
func (o *GetUsageOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUsageOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsageOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetUsageOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
