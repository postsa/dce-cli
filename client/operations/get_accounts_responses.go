// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAccountsReader is a Reader for the GetAccounts structure.
type GetAccountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetAccountsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /accounts] GetAccounts", response, response.Code())
	}
}

// NewGetAccountsOK creates a GetAccountsOK with default headers values
func NewGetAccountsOK() *GetAccountsOK {
	return &GetAccountsOK{}
}

/*
GetAccountsOK describes a response with status code 200, with default header values.

OK
*/
type GetAccountsOK struct {
	AccessControlAllowHeaders string
	AccessControlAllowMethods string
	AccessControlAllowOrigin  string

	/* Appears only when there is another page of results in the query. The value contains the URL for the next page of the results and follows the `<url>; rel="next"` convention.
	 */
	Link string

	Payload []*GetAccountsOKBodyItems0
}

// IsSuccess returns true when this get accounts o k response has a 2xx status code
func (o *GetAccountsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get accounts o k response has a 3xx status code
func (o *GetAccountsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accounts o k response has a 4xx status code
func (o *GetAccountsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get accounts o k response has a 5xx status code
func (o *GetAccountsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get accounts o k response a status code equal to that given
func (o *GetAccountsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get accounts o k response
func (o *GetAccountsOK) Code() int {
	return 200
}

func (o *GetAccountsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accounts][%d] getAccountsOK %s", 200, payload)
}

func (o *GetAccountsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accounts][%d] getAccountsOK %s", 200, payload)
}

func (o *GetAccountsOK) GetPayload() []*GetAccountsOKBodyItems0 {
	return o.Payload
}

func (o *GetAccountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Access-Control-Allow-Headers
	hdrAccessControlAllowHeaders := response.GetHeader("Access-Control-Allow-Headers")

	if hdrAccessControlAllowHeaders != "" {
		o.AccessControlAllowHeaders = hdrAccessControlAllowHeaders
	}

	// hydrates response header Access-Control-Allow-Methods
	hdrAccessControlAllowMethods := response.GetHeader("Access-Control-Allow-Methods")

	if hdrAccessControlAllowMethods != "" {
		o.AccessControlAllowMethods = hdrAccessControlAllowMethods
	}

	// hydrates response header Access-Control-Allow-Origin
	hdrAccessControlAllowOrigin := response.GetHeader("Access-Control-Allow-Origin")

	if hdrAccessControlAllowOrigin != "" {
		o.AccessControlAllowOrigin = hdrAccessControlAllowOrigin
	}

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountsForbidden creates a GetAccountsForbidden with default headers values
func NewGetAccountsForbidden() *GetAccountsForbidden {
	return &GetAccountsForbidden{}
}

/*
GetAccountsForbidden describes a response with status code 403, with default header values.

Unauthorized
*/
type GetAccountsForbidden struct {
}

// IsSuccess returns true when this get accounts forbidden response has a 2xx status code
func (o *GetAccountsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accounts forbidden response has a 3xx status code
func (o *GetAccountsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accounts forbidden response has a 4xx status code
func (o *GetAccountsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accounts forbidden response has a 5xx status code
func (o *GetAccountsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get accounts forbidden response a status code equal to that given
func (o *GetAccountsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get accounts forbidden response
func (o *GetAccountsForbidden) Code() int {
	return 403
}

func (o *GetAccountsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts][%d] getAccountsForbidden", 403)
}

func (o *GetAccountsForbidden) String() string {
	return fmt.Sprintf("[GET /accounts][%d] getAccountsForbidden", 403)
}

func (o *GetAccountsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetAccountsOKBodyItems0 Account Details
swagger:model GetAccountsOKBodyItems0
*/
type GetAccountsOKBodyItems0 struct {

	// Status of the Account.
	// "Ready": The account is clean and ready for lease
	// "NotReady": The account is in "dirty" state, and needs to be reset before it may be leased.
	// "Leased": The account is leased to a principal
	//
	// Enum: ["Ready","NotReady","Leased","Orphaned"]
	AccountStatus string `json:"accountStatus,omitempty"`

	// ARN for an IAM role within this AWS account. The DCE master account will assume this IAM role to execute operations within this AWS account. This IAM role is configured by the client, and must be configured with [a Trust Relationship with the DCE master account.](/https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html)
	AdminRoleArn string `json:"adminRoleArn,omitempty"`

	// Epoch timestamp, when account record was created
	CreatedOn int64 `json:"createdOn,omitempty"`

	// AWS Account ID
	ID string `json:"id,omitempty"`

	// Epoch timestamp, when account record was last modified
	LastModifiedOn int64 `json:"lastModifiedOn,omitempty"`

	// Any organization specific data pertaining to the account that needs to be persisted
	Metadata interface{} `json:"metadata,omitempty"`

	// The S3 object ETag used to apply the Principal IAM Policy within this AWS account.  This policy is created by the DCE master account, and is assumed by people with access to principalRoleArn.
	PrincipalPolicyHash string `json:"principalPolicyHash,omitempty"`

	// ARN for an IAM role within this AWS account. This role is created by the DCE master account, and may be assumed by principals to login to their AWS child account.
	PrincipalRoleArn string `json:"principalRoleArn,omitempty"`
}

// Validate validates this get accounts o k body items0
func (o *GetAccountsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getAccountsOKBodyItems0TypeAccountStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ready","NotReady","Leased","Orphaned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAccountsOKBodyItems0TypeAccountStatusPropEnum = append(getAccountsOKBodyItems0TypeAccountStatusPropEnum, v)
	}
}

const (

	// GetAccountsOKBodyItems0AccountStatusReady captures enum value "Ready"
	GetAccountsOKBodyItems0AccountStatusReady string = "Ready"

	// GetAccountsOKBodyItems0AccountStatusNotReady captures enum value "NotReady"
	GetAccountsOKBodyItems0AccountStatusNotReady string = "NotReady"

	// GetAccountsOKBodyItems0AccountStatusLeased captures enum value "Leased"
	GetAccountsOKBodyItems0AccountStatusLeased string = "Leased"

	// GetAccountsOKBodyItems0AccountStatusOrphaned captures enum value "Orphaned"
	GetAccountsOKBodyItems0AccountStatusOrphaned string = "Orphaned"
)

// prop value enum
func (o *GetAccountsOKBodyItems0) validateAccountStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getAccountsOKBodyItems0TypeAccountStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetAccountsOKBodyItems0) validateAccountStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccountStatusEnum("accountStatus", "body", o.AccountStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get accounts o k body items0 based on context it is used
func (o *GetAccountsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAccountsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
